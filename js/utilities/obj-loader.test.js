import { describe, it } from "@std/testing/bdd";
import { expect } from "@std/expect";
import { loadObj } from "./obj-loader.js";

describe("object loader", () => {
	describe("loadObj", () => {
		it("should load quad faced object with multi-indexed faces", () => {
			const obj = loadObj(`
				v -1 0 0
				v 1 0 0
				v 0 1 0

				vt 0 0 
				vt 1 0 
				vt 0.5 1

				f 1 2 3
			`);

			expect(obj.positions).toEqual([
				-1, 0, 0,
				1, 0, 0,
				0, 1, 0
			]);
			expect(obj.uvs).toEqual([
				0, 0,
				1, 0,
				0.5, 1
			]);
			expect(obj.indices).toEqual([
				0, 1, 2,
			]);
			expect(obj.positionSize).toEqual(3);
			expect(obj.uvSize).toEqual(2);
			expect(obj.length).toEqual(3);
		});
		it("should load quad faced object with multi-indexed faces", () => {
			const obj = loadObj(`
				v -0.5 -0.5 0
				v 0.5 -0.5 0
				v 0.5 0.5 0
				v -0.5 0.5 0

				vt 0 0
				vt 1 0
				vt 1 1
				vt 0 1

				vn 0 0 -1

				f 1/1/1 2/2/1 3/3/1 4/4/1	
			`);

			expect(obj.positions).toEqual([
				-0.5, -0.5, 0, 
				0.5, -0.5, 0, 
				0.5, 0.5, 0,
				-0.5, 0.5, 0,
			]);
			expect(obj.uvs).toEqual([
				0, 0,
				1, 0,
				1, 1,
				0, 1
			]);
			expect(obj.normals).toEqual([
				0, 0, -1,
				0, 0, -1,
				0, 0, -1,
				0, 0, -1
			]);
			expect(obj.indices).toEqual([
				0, 1, 2,
				0, 2, 3
			]);
			expect(obj.positionSize).toEqual(3);
			expect(obj.uvSize).toEqual(2);
			expect(obj.normalSize).toEqual(3);
			expect(obj.length).toEqual(4);
		});
		it("should load quad faced object with multi-indexed faces with reverse winding", () => {
			const obj = loadObj(`
				v -0.5 -0.5 0
				v 0.5 -0.5 0
				v 0.5 0.5 0
				v -0.5 0.5 0

				vt 0 0
				vt 1 0
				vt 1 1
				vt 0 1

				vn 0 0 -1

				f 1/1/1 2/2/1 3/3/1 4/4/1	
			`, { reverseWinding: true });

			expect(obj.positions).toEqual([
				-0.5, -0.5, 0,
				0.5, -0.5, 0,
				0.5, 0.5, 0,
				-0.5, 0.5, 0,
			]);
			expect(obj.uvs).toEqual([
				0, 0,
				1, 0,
				1, 1,
				0, 1
			]);
			expect(obj.normals).toEqual([
				0, 0, -1,
				0, 0, -1,
				0, 0, -1,
				0, 0, -1
			]);
			expect(obj.indices).toEqual([
				2, 1, 0,
				3, 2, 0
			]);
			expect(obj.positionSize).toEqual(3);
			expect(obj.uvSize).toEqual(2);
			expect(obj.normalSize).toEqual(3);
			expect(obj.length).toEqual(4);
		});
		it("should load triangle faced object with multi-indexed faces", () => {
			const obj = loadObj(`
				#cube
				v 1 -1 -1
				v 1 -1 1
				v -1 -1 1
				v -1 -1 -1
				v 1 1 -1
				v 1 1 1
				v -1 1 1
				v -1 1 -1

				vt 1 0.333333
				vt 1 0.666667
				vt 0.666667 0.666667
				vt 0.666667 0.333333
				vt 0.666667 0
				vt 0 0.333333
				vt 0 0
				vt 0.333333 0
				vt 0.333333 1
				vt 0 1
				vt 0 0.666667
				vt 0.333333 0.333333
				vt 0.333333 0.666667
				vt 1 0

				vn 0 -1 0
				vn 0 1 0
				vn 1 0 0
				vn 0 0 1
				vn -1 0 0
				vn 0 0 -1

				f 2/1/1 3/2/1 4/3/1
				f 8/1/2 7/4/2 6/5/2
				f 5/6/3 6/7/3 2/8/3
				f 6/8/4 7/5/4 3/4/4
				f 3/9/5 7/10/5 8/11/5
				f 1/12/6 4/13/6 8/11/6
				f 1/4/1 2/1/1 4/3/1
				f 5/14/2 8/1/2 6/5/2
				f 1/12/3 5/6/3 2/8/3
				f 2/12/4 6/8/4 3/4/4
				f 4/13/5 3/9/5 8/11/5
				f 5/6/6 1/12/6 8/11/6
			`);

			expect(obj.positions).toEqual([
				1, -1, 1,
				-1, -1, 1,
				-1, -1, -1,
				-1, 1, -1, 
				-1, 1, 1,
				1, 1, 1,
				1, 1, -1,
				1, 1, 1,
				1, -1, 1,
				1, 1, 1,
				-1, 1, 1,
				-1, -1, 1,
				-1, -1, 1,
				-1, 1, 1,
				-1, 1, -1,
				1, -1, -1,
				-1, -1, -1,
				-1, 1, -1,
				1, -1, -1,
				1, -1, 1,
				-1, -1, -1,
				1, 1, -1,
				-1, 1,-1,
				1, 1, 1,
				1, -1, -1,
				1, 1, -1,
				1, -1, 1,
				1, -1, 1,
				1, 1, 1,
				-1, -1, 1,
				-1, -1, -1,
				-1, -1, 1,
				-1, 1, -1,
				1, 1, -1,
				1, -1, -1,
				-1, 1, -1
			]);
			expect(obj.uvs).toEqual([
				1, 0.333333,
				1, 0.666667,
				0.666667, 0.666667,
				1, 0.333333,
				0.666667, 0.333333,
				0.666667, 0,
				0, 0.333333,
				0, 0,
				0.333333, 0,
				0.333333, 0,
				0.666667, 0,
				0.666667, 0.333333,
				0.333333, 1,
				0, 1,
				0, 0.666667,
				0.333333, 0.333333,
				0.333333, 0.666667,
				0, 0.666667,
				0.666667, 0.333333,
				1, 0.333333,
				0.666667, 0.666667,
				1, 0,
				1, 0.333333,
				0.666667, 0,
				0.333333, 0.333333,
				0, 0.333333,
				0.333333, 0,
				0.333333, 0.333333,
				0.333333, 0,
				0.666667, 0.333333,
				0.333333, 0.666667,
				0.333333, 1,
				0, 0.666667,
				0, 0.333333,
				0.333333, 0.333333,
				0, 0.666667
			]);
			expect(obj.normals).toEqual([
				0, -1, 0,
				0, -1, 0,
				0, -1, 0,
				0, 1, 0,
				0, 1, 0,
				0, 1, 0,
				1, 0, 0,
				1, 0, 0,
				1, 0, 0,
				0, 0, 1,
				0, 0, 1,
				0, 0, 1,
				-1, 0, 0,
				-1, 0, 0,
				-1, 0, 0,
				0, 0, -1,
				0, 0, -1,
				0, 0, -1,
				0, -1, 0,
				0, -1, 0,
				0, -1, 0,
				0, 1, 0,
				0, 1, 0,
				0, 1, 0,
				1, 0, 0,
				1, 0, 0,
				1, 0, 0,
				0, 0, 1,
				0, 0, 1,
				0, 0, 1,
				-1, 0, 0,
				-1, 0, 0,
				-1, 0, 0,
				0, 0, -1,
				0, 0, -1,
				0, 0, -1,
			]);
			expect(obj.indices).toEqual([
				0, 1, 2,
				3, 4, 5,
				6, 7, 8,
				9, 10, 11,
				12, 13, 14,
				15, 16, 17,
				18, 19, 20,
				21, 22, 23,
				24, 25, 26,
				27, 28, 29,
				30, 31, 32,
				33, 34, 35
			]);
			expect(obj.positionSize).toEqual(3);
			expect(obj.uvSize).toEqual(2);
			expect(obj.normalSize).toEqual(3);
			expect(obj.length).toEqual(36);
		});
		it("should load triangle faced object with multi-indexed faces with reversed winding", () => {
			const obj = loadObj(`
				#cube
				v 1 -1 -1
				v 1 -1 1
				v -1 -1 1
				v -1 -1 -1
				v 1 1 -1
				v 1 1 1
				v -1 1 1
				v -1 1 -1

				vt 1 0.333333
				vt 1 0.666667
				vt 0.666667 0.666667
				vt 0.666667 0.333333
				vt 0.666667 0
				vt 0 0.333333
				vt 0 0
				vt 0.333333 0
				vt 0.333333 1
				vt 0 1
				vt 0 0.666667
				vt 0.333333 0.333333
				vt 0.333333 0.666667
				vt 1 0

				vn 0 -1 0
				vn 0 1 0
				vn 1 0 0
				vn 0 0 1
				vn -1 0 0
				vn 0 0 -1

				f 2/1/1 3/2/1 4/3/1
				f 8/1/2 7/4/2 6/5/2
				f 5/6/3 6/7/3 2/8/3
				f 6/8/4 7/5/4 3/4/4
				f 3/9/5 7/10/5 8/11/5
				f 1/12/6 4/13/6 8/11/6
				f 1/4/1 2/1/1 4/3/1
				f 5/14/2 8/1/2 6/5/2
				f 1/12/3 5/6/3 2/8/3
				f 2/12/4 6/8/4 3/4/4
				f 4/13/5 3/9/5 8/11/5
				f 5/6/6 1/12/6 8/11/6
			`, { reverseWinding: true });

			expect(obj.positions).toEqual([
				1, -1, 1,
				-1, -1, 1,
				-1, -1, -1,
				-1, 1, -1,
				-1, 1, 1,
				1, 1, 1,
				1, 1, -1,
				1, 1, 1,
				1, -1, 1,
				1, 1, 1,
				-1, 1, 1,
				-1, -1, 1,
				-1, -1, 1,
				-1, 1, 1,
				-1, 1, -1,
				1, -1, -1,
				-1, -1, -1,
				-1, 1, -1,
				1, -1, -1,
				1, -1, 1,
				-1, -1, -1,
				1, 1, -1,
				-1, 1, -1,
				1, 1, 1,
				1, -1, -1,
				1, 1, -1,
				1, -1, 1,
				1, -1, 1,
				1, 1, 1,
				-1, -1, 1,
				-1, -1, -1,
				-1, -1, 1,
				-1, 1, -1,
				1, 1, -1,
				1, -1, -1,
				-1, 1, -1
			]);
			expect(obj.uvs).toEqual([
				1, 0.333333,
				1, 0.666667,
				0.666667, 0.666667,
				1, 0.333333,
				0.666667, 0.333333,
				0.666667, 0,
				0, 0.333333,
				0, 0,
				0.333333, 0,
				0.333333, 0,
				0.666667, 0,
				0.666667, 0.333333,
				0.333333, 1,
				0, 1,
				0, 0.666667,
				0.333333, 0.333333,
				0.333333, 0.666667,
				0, 0.666667,
				0.666667, 0.333333,
				1, 0.333333,
				0.666667, 0.666667,
				1, 0,
				1, 0.333333,
				0.666667, 0,
				0.333333, 0.333333,
				0, 0.333333,
				0.333333, 0,
				0.333333, 0.333333,
				0.333333, 0,
				0.666667, 0.333333,
				0.333333, 0.666667,
				0.333333, 1,
				0, 0.666667,
				0, 0.333333,
				0.333333, 0.333333,
				0, 0.666667
			]);
			expect(obj.normals).toEqual([
				0, -1, 0,
				0, -1, 0,
				0, -1, 0,
				0, 1, 0,
				0, 1, 0,
				0, 1, 0,
				1, 0, 0,
				1, 0, 0,
				1, 0, 0,
				0, 0, 1,
				0, 0, 1,
				0, 0, 1,
				-1, 0, 0,
				-1, 0, 0,
				-1, 0, 0,
				0, 0, -1,
				0, 0, -1,
				0, 0, -1,
				0, -1, 0,
				0, -1, 0,
				0, -1, 0,
				0, 1, 0,
				0, 1, 0,
				0, 1, 0,
				1, 0, 0,
				1, 0, 0,
				1, 0, 0,
				0, 0, 1,
				0, 0, 1,
				0, 0, 1,
				-1, 0, 0,
				-1, 0, 0,
				-1, 0, 0,
				0, 0, -1,
				0, 0, -1,
				0, 0, -1,
			]);
			expect(obj.indices).toEqual([
				2, 1, 0,
				5, 4, 3,
				8, 7, 6,
				11, 10, 9,
				14, 13, 12,
				17, 16, 15,
				20, 19, 18,
				23, 22, 21,
				26, 25, 24,
				29, 28, 27,
				32, 31, 30,
				35, 34, 33
			]);
			expect(obj.positionSize).toEqual(3);
			expect(obj.uvSize).toEqual(2);
			expect(obj.normalSize).toEqual(3);
			expect(obj.length).toEqual(36);
		});
	});
});